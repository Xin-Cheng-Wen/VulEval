import subprocess as sp
import argparse, os

parser = argparse.ArgumentParser()
parser.add_argument('--gpu', type=str, required=True)
parser.add_argument('--starting_step', type=int, default=1)
args = parser.parse_args()

n = 11

dir = [
	'data/unprocessed_code',
	'code-slicer',
	'data',
	'data_processing',
	'data_processing',
	'data_processing',
	'data_processing',
	'_devign',
	'_devign',
	'_devign',
	'Vuld_SySe/representation_learning',
]

cmd = [
	['python', 'process.py'],
	['python', 'process.py', '--file_path', '../../data/raw_code'],
	['python', 'process.py'],
	['python', 'extract_slices.py'],
	['python', 'train_wv_sysevr.py'],
	['python', 'create_ggnn_data.py'],
 	['python', 'full_data_prep_script.py'],
	['python', 'preprocess.py'],
	['python', 'main.py', '--gpu', args.gpu],
	['python', 'main.py', '--no_train', '--gpu', args.gpu],
	['python', 'api_test.py', '--gpu', args.gpu],
]

desc = [
	'1. break down dataset files into source files with a single function each',
	'2. parse codes',
	'3. move files',
	'4. extract slices',
	'5. train Word2Vec on Training set',
	'6. create GGNN data',
	'7. process full data',
	'8. move *-line-ggnn.json for devign',
	'9. devign',
	'10. get devign representation',
	'11. reveal',
]

assert len(dir) == n and len(cmd) == n and len(desc) == n

for i in range(args.starting_step - 1, n):
    print(f"--- {desc[i]} ---")
    os.chdir(f'/data/zzyang/reveal/{dir[i]}')
    assert sp.run(cmd[i]).returncode == 0, f'Failed to execute step "{desc[i]}"'
