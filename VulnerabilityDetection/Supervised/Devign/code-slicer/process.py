import os
import json
import time
import subprocess
import datetime
import signal
import argparse
import logging
import pandas as pd
from multiprocessing import Pool
import shutil

def execute(args):
    file_path, file = args
    try:
        subprocess.run(['bash', 'slicer.sh', file_path, file, '1', f'parsed/{file}'], timeout=10)
    except subprocess.TimeoutExpired as e:
        print(f">>> {e}")

def process(file_path, start, end):
    files = sorted(os.listdir(file_path))
    print(len(files))
    end = min(end, len(files))

    with Pool(24) as pool:
        pool.map(execute, zip([file_path] * (end - start), files[start:end]))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--file_path', help='funtions dic.', default='../devign_dataset')
    parser.add_argument('--start', help='start functions number to parsed', type=int, default=0)
    parser.add_argument('--end', help='end functions number to parsed', type=int, default=1000000)
    args = parser.parse_args()
    file_path = args.file_path
    start = args.start
    end = args.end
    os.chdir('joern')
    if os.path.isdir('tmp'):
        shutil.rmtree('tmp')

    process(file_path, start, end)
