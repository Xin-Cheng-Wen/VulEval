Data processing

Assume that you are at the root location of this project before executing commands.

Original: data/unprocessed_code/<train/valid/test>_cdata.jsonl

Execute step 1-11 in one line: python full.py --gpu <GPUID>
Execute step x-11 in one line: python full.py --gpu <GPUID> --starting_step x

1. break down dataset files into source files with a single function each
	Command: cd data/unprocessed_code && python process.py
	Result: data/raw_code/<train/valid/test><#>_<0/1>.c

2. parse codes
	Command: cd code-slicer && python process.py --file_path ../../data/raw_code
	Note: process.py will change current directory to code-slicer/joern before applying file path
	Result: code-slicer/joern/<name>/tmp<name>/<name>/<edges/nodes>.csv
		where <name> == <train/valid/test><#>_<0/1>.c

3. move files
	Command: cd data && python process.py
	Result: data/parsed_code/<train/valid/test><#>_<0/1>.c/<edges/nodes>.csv

4. extract slices
	Note: Please specify the location of libclang.so in the Python file first.
	Command: cd data_processing && python extract_slices.py
	Result: data/<train/valid/test>_data_with_slices.json

5. train Word2Vec on Training set
	Command: cd data_processing && python train_wv_sysevr.py
	Result: data/Word2Vec/default

6. create GGNN data
	Command: cd data_processing && python create_ggnn_data.py
	Result: data/full_experiment_real_data/<train/valid/test>.shard<#>

7. process full data
	Note: Please specify the location of libclang.so in the Python file first.
	Command: cd data_processing && python full_data_prep_script.py
	Result: data/full_experiment_real_data_processed/<train/valid/test>-<full_graph/line-ggnn>.json

8. move *-line-ggnn.json for devign
	Command: cd _devign && python preprocess.py
	Result: _devign/input/<train/valid/test>_GGNNinput.json

9. devign
	Command: cd _devign && python main.py --gpu <GPUID>
	Note: the program may crash on first launch. On consecutive runs, it can utilize the cached input/processed.bin to avoid crashing.
	Result: _devign/models/GGNNSumModel-model.bin

10. get devign representation
	Command: cd _devign && python main.py --no_train --gpu <GPUID>
	Result: _devign/saved_embeds/<train/valid/test>.json

11. reveal
	Command (Training & Testing): cd Vuld_SySe/representation_learning && python api_test.py --gpu <GPUID>
	Command (Testing): cd Vuld_SySe/representation_learning && python api_test.py --no_train --gpu <GPUID>
	Result (model): Vuld_SySe/representation_learning/results_test/model<#>.bin
	Result (performance): Vuld_SySe/representation_learning/<no_train/train>.log

12. backup
	Backup the following files/directories:
		data
		_devign
			input
			models
			saved_embeds
		Vuld_SySe/representation_learning
			train.log
			results_test

13. clean up
	If you prefer to delete rather than backup the intermediate results, run the following command:
		cd data
		rm -rf *.json full_experiment_real_data full_experiment_real_data_processed raw_code parsed_code Word2Vec
		cd ../_devign
		rm -rf saved_embeds input models
		cd ../Vuld_SySe/representation_learning
		rm -rf *.log results_test
